// <auto-generated />
using System;
using Com.Sapient.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Com.Sapient.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201017200028_UserAdded")]
    partial class UserAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("Com.Sapient.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLineOne")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AddressLineTwo")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PinCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("State")
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserAccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Com.Sapient.Models.Role", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Com.Sapient.Models.SecurityQuestion", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Question")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SecurityQuestions");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Question = "What is your pet name?"
                        },
                        new
                        {
                            Id = (short)2,
                            Question = "What is your favourite dish?"
                        });
                });

            modelBuilder.Entity("Com.Sapient.Models.UserAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<char>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<short>("IsdCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<long>("Phone")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Email = "test1@gmail.com",
                            FirstName = "raj",
                            Gender = 'm',
                            IsActive = false,
                            IsdCode = (short)0,
                            LastName = "kapoor",
                            Password = "IGuSjnsanhBXHqjlBfuc/zr5bEUF+gMJqx0cLo3qxUk=",
                            Phone = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Email = "test2@gmail.com",
                            FirstName = "manroop",
                            Gender = 'm',
                            IsActive = true,
                            IsdCode = (short)0,
                            LastName = "singh",
                            Password = "xtbgJ2u7Mnwi2ltBq8gnuj9Fs4Pc+je76k2FkWTkuIc=",
                            Phone = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Email = "adityakhanna2009@gmail.com",
                            FirstName = "vin",
                            Gender = 'm',
                            IsActive = true,
                            IsdCode = (short)0,
                            LastName = "diesel",
                            Password = "5wmsr/dFEZ182tLrRlSWAkRkpWBXeU163W52dKE8D5w=",
                            Phone = 0L
                        },
                        new
                        {
                            Id = 4L,
                            Email = "anshulameta@gmail.com",
                            FirstName = "charles",
                            Gender = 'm',
                            IsActive = true,
                            IsdCode = (short)0,
                            LastName = "arthur",
                            Password = "pAwQoC/tCfZfJJwPJUnooqsKMld5AUs5aDveAygv4Mw=",
                            Phone = 0L
                        },
                        new
                        {
                            Id = 5L,
                            Email = "soni.nikhilkumar@gmail.com",
                            FirstName = "nikhil",
                            Gender = 'm',
                            IsActive = true,
                            IsdCode = (short)0,
                            LastName = "soni",
                            Password = "3WKb/tDJ8RQKwN1/72hUdWtVDoMqj/IxP6/XxYQKzvI=",
                            Phone = 0L
                        },
                        new
                        {
                            Id = 6L,
                            Email = "amrithkhanna2010@gmail.com",
                            FirstName = "pariwesh",
                            Gender = 'm',
                            IsActive = true,
                            IsdCode = (short)0,
                            LastName = "gupta",
                            Password = "7s+Jo6RqenNWecaZbluGFZo3eQkBvgGM8XBtptdQtyA=",
                            Phone = 0L
                        },
                        new
                        {
                            Id = 7L,
                            Email = "test4@gmail.com",
                            FirstName = "megha",
                            Gender = 'f',
                            IsActive = true,
                            IsdCode = (short)0,
                            LastName = "gupta",
                            Password = "pNpb0Jiv9awBMN0qCAYK4Q05SYGgrpd7e9DA+6bn3dQ=",
                            Phone = 0L
                        },
                        new
                        {
                            Id = 8L,
                            Email = "test5@gmail.com",
                            FirstName = "arnab",
                            Gender = 'm',
                            IsActive = true,
                            IsdCode = (short)0,
                            LastName = "ari",
                            Password = "C/Yfv0Sa9csNn4kOb1seot4qObkGlTJOVYDWPvWBtks=",
                            Phone = 0L
                        },
                        new
                        {
                            Id = 9L,
                            Email = "test6@gmail.com",
                            FirstName = "vijay",
                            Gender = 'm',
                            IsActive = true,
                            IsdCode = (short)0,
                            LastName = "pandey",
                            Password = "/egXcXQpCI34wJE76eccYzYmw1p6pH5iRTH8o7MSP7g=",
                            Phone = 0L
                        });
                });

            modelBuilder.Entity("Com.Sapient.Models.User_Role_Mapping", b =>
                {
                    b.Property<long>("UserAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserAccountId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("User_Role_Mappings");
                });

            modelBuilder.Entity("Com.Sapient.Models.User_SecurityQuestion_Mapping", b =>
                {
                    b.Property<long>("UserAccountId")
                        .HasColumnType("INTEGER");

                    b.Property<short>("SecurityQuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Answer")
                        .HasColumnType("TEXT");

                    b.HasKey("UserAccountId", "SecurityQuestionId");

                    b.HasIndex("SecurityQuestionId");

                    b.ToTable("User_SecurityQuestion_Mappings");

                    b.HasData(
                        new
                        {
                            UserAccountId = 1L,
                            SecurityQuestionId = (short)1,
                            Answer = "Fluffy"
                        },
                        new
                        {
                            UserAccountId = 2L,
                            SecurityQuestionId = (short)2,
                            Answer = "chicken"
                        });
                });

            modelBuilder.Entity("Com.Sapient.Models.Address", b =>
                {
                    b.HasOne("Com.Sapient.Models.UserAccount", null)
                        .WithMany("Addresses")
                        .HasForeignKey("UserAccountId");
                });

            modelBuilder.Entity("Com.Sapient.Models.User_Role_Mapping", b =>
                {
                    b.HasOne("Com.Sapient.Models.Role", "Role")
                        .WithMany("User_Role_Mapping")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Com.Sapient.Models.UserAccount", "UserAccount")
                        .WithMany("UserRoleMapping")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Com.Sapient.Models.User_SecurityQuestion_Mapping", b =>
                {
                    b.HasOne("Com.Sapient.Models.SecurityQuestion", "SecurityQuestion")
                        .WithMany("User_SecurityQuestion_Mapping")
                        .HasForeignKey("SecurityQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Com.Sapient.Models.UserAccount", "UserAccount")
                        .WithMany("UserSecurityQuestionMapping")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
